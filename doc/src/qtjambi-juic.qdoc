/*!
    \page qtjambi-juic.html

    \title Java User Interface Compiler (JUIC)

    The Java User Interface Compiler (JUIC) command-line tool converts
    the Java user interface definition file (\c .jui) generated by Qt
    Designer to Java source files.

    \section1 Usage

    \code
         juic [option]... <.jui file>
    \endcode

    Note that \QJ also provides an \l {Qt Jambi Eclipse
    Integration}{Eclipse integration} that includes JUIC,
    automatically running the tool whenever the \c .jui files
    change. In Eclipse, JUIC is integrated as a custom build tool
    which will be executed prior to the Eclipse built-in incremental
    builder meaning that all source code is ensured to be up to date
    after the Java user interface has been edited in Qt Designer.

    See the \l {Simple UI Example} example documentation for details
    on how to implement Java user interfaces for applications, using \c .jui
    files.

    \section1 Options

    The following table lists the command-line options recognized by
    JUIC:

    \table 100%
    \header \o Option \o Description

    \row
    \o \c -h, \c -help
    \o Describes the usage and lists the command line options.

    \row
    \o \c -v, \c -version
    \o Displays the compiler's version number.

    \row
    \o \c {-d <dir>}
    \o Specifies the output directory.

    \row
    \o \c {-x <xml file>}
    \o Load custom configuration file.

    \row
    \o \c {-p <package>}
    \o Specifies a package for the generated \c .class file (relative
    to the output directory).

    \row
    \o \c {-cp <path>}
    \o Updates all the \c .jui files in the given path.The path
    argument is optional; the default path is $CLASSPATH.

    \row
    \o \c {-pf <prefix>}
    \o Specifies the the prefix used for the generated classes. JUIC
    automatically adds 'Ui_' prefix to the generated classes. Use this
    option to alter the prefix, omit the argument to remove the prefix.

    \row
    \o \c {-i <file1>:<...>:<fileX>}
    \o Used in combination with the 'cp' option, making JUIC only
    update the specified files.

    \row
    \o \c {-e <file1>:<...>:<fileX>}
    \o Used in combination with the 'cp' option, prohibiting JUIC from
    updating the specified files.

    \row
    \o \c -a
    \o Updates the files regardless of modification date.

    \endtable


    \section1 Compatibility with Qt .ui Files

    Qt has for several years used \c .ui files to represent
    forms. These are generated with Qt Designer and converted to code
    using the \c {uic} tool. The \c .ui files are xml datastructures
    containing class names, properties and connections. Many of these
    are C++ specific, such as enum values for properties and signal
    signatures.

    Up until the third technology preview, Qt Jambi also used this
    file format to represent forms created with Qt Designer. But with
    the beta release, Qt Jambi introduced a new file format for the
    Java user interfaces (with the extension \c .jui). This is done to
    add better support for custom widgets written in Java, widgets
    with signals and properties of their own. Note that the \c .jui
    XML data structure is based on Java syntax.

    For compatibility reasons, the Qt Jambi generator provides an
    option to for convert a C++ \c .ui file into a Qt Jambi \c .jui
    file. This is done by running the generator with the \c
    {--convert-to-jui=[uifile]} option like this:

    \code
        ./generator qtmasterheaderfile.h jambimastertypesystem.txt
                     --convert-to-jui=calculatorform.ui
    \endcode

    This will convert the \c calculatorform.ui to \c
    calculatorform.jui based on the generator's default settings. Note
    that if the original user interface contains custom widgets, its
    type system and header file must be specified to the
    generator. Please see the \l {The Qt Jambi Generator}{Qt Jambi
    Generator} documentation for details.

    If the original user interface contains promoted widgets, then
    the Java equivalents for these should first be added to the
    custom widgets specification for the Qt Jambi Designer (this
    can be done automatically using the \l {Qt Jambi Eclipse Integration}
    {Eclipse Integration} or manually using a text editor) then the name(s)
    of these xml specifications should be passed to the generator on the
    command line:

    \code
        ./generator qtmasterheaderfile.h jambimastertypesystem.txt
                     --convert-to-jui=calculatorform.ui
                     --custom-widgets=../plugins/qtjambi/qtjambi_examples.xml
    \endcode

    For more details on this, see \l {The Qt Jambi Generator}{Qt Jambi
    Generator} documentation.



*/
