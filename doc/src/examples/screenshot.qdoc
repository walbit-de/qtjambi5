/*!
    \page qtjambi-screenshot.html
    \title Screenshot Example

    \bold {Code}:
    \list
        \o \l{Code for Screenshot Example}{Screenshot.java}
    \endlist

    The Screenshot example shows how to take a screenshot of the
    desktop using QApplication and QDesktopWidget. It also shows how
    to use QTimer to provide a single-shot timer, and how to
    reimplement the \l {QWidget::resizeEvent()}{QWidget.resizeEvent()}
    event handler to make sure that an application resizes smoothly
    and without data loss.

    \image screenshot-example.png

    With the application the users can take a screenshot of their
    desktop. They are provided with a couple of options:

    \list
        \o Delaying the screenshot, giving them time to rearrange
           their desktop.
        \o Hiding the application's window while the screenshot is taken.
    \endlist

    In addition, the application allows the users to save their
    screenshot if they want to.

    \section1 Screenshot Class Implementation

    The \c Screenshot class inherits QWidget and is the application's
    main widget. It displays the application options and a preview of
    the screenshot.

    \snippet Screenshot.java 0
    \snippet Screenshot.java 2

    In the constructor we first create the QLabel displaying the
    screenshot preview.

    We set the QLabel's size policy to be \l
    {QSizePolicy::Expanding}{Policy.Expanding} both horizontally and
    vertically. This means that the QLabel's size hint is a sensible
    size, but the widget can be shrunk and still be useful. Also, the
    widget can make use of extra space, so it should get as much space
    as possible. Then we make sure the QLabel is aligned in the center
    of the \c Screenshot widget, and set its minimum size.

    We create the applications's buttons and the group box containing
    the application's options, and put it all into a main
    layout. Finally, we take the initial screenshot and set the inital
    delay and the window title, before we resize the widget to a
    suitable size.

    \snippet Screenshot.java 3

    The \c resizeEvent() method is reimplemented to receive the
    resize events dispatched to the widget. The purpose is to scale
    the preview screenshot pixmap without deformation of its content,
    and also make sure that the application can be resized smoothly.

    To achieve the first goal, we scale the screenshot pixmap using \l
    {Qt::KeepAspectRatio}{ AspectRatioMode.KeepAspectRatio}. We scale
    the pixmap to a rectangle as large as possible inside the current
    size of the screenshot preview label, preserving the aspect
    ratio. This means that if the user resizes the application window
    in only one direction, the preview screenshot keeps the same size.

    To reach our second goal, we make sure that the preview screenshot
    only is repainted (using the private \c updateScreenshotLabel()
    method) when it actually changes its size.

    \snippet Screenshot.java 4

    The private \c newScreenshot() method is called when the user
    requests a new screenshot; but the method only prepares a new
    screenshot.

    First we check if the \gui {Hide This Window} option is checked,
    and if it is we hide the \c Screenshot widget. Then we disable the
    \gui {New Screenshot} button, to make sure the user only can
    request one screenshot at a time.

    We create a timer using the QTimer class which provides repetitive
    and single-shot timers. We set the timer to time out only once,
    using the static \l {QTimer::singleShot()}{QTimer.singleShot()}
    method. This method calls the private \c shootScreen() method after
    the time interval specified by the \gui {Screenshot Delay}
    option. It is \c shootScreen() that actually performs the
    screenshot.

    \snippet Screenshot.java 5

    The \c saveScreenshot() method is called when the user push the \gui
    Save button, and it presents a file dialog using the QFileDialog
    class.

    QFileDialog enables a user to traverse the file system in order to
    select one or many files or a directory. The easiest way to create
    a QFileDialog is to use the static convenience methods.

    We define the default file format to be png, and we make the file
    dialog's initial path the path the application is run from. We
    create the file dialog using the static \l
    {QFileDialog::getSaveFileName()}{QFileDialog.getSaveFileName()}
    method which returns a file name selected by the user. The file
    does not have to exist. If the file name is valid, we use the \l
    {QPixmap::save()}{QPixmap.save()} method to save the screenshot's
    original pixmap in that file.

    \snippet Screenshot.java 6

    The \c shootScreen() method is called to take the screenshot. If the
    user has chosen to delay the screenshot, we make the application
    beep when the screenshot is taken using the static \l
    {QApplication::beep()}{QApplication.beep()} method.

    The QApplication class manages the GUI application's control flow
    and main settings. It contains the main event loop, where all
    events from the window system and other sources are processed and
    dispatched.

    \snippet Screenshot.java 7

    We take the screenshot using the static \l
    {QPixmap::grabWindow()}{QPixmap.grabWindow()} method. The method
    grabs the contents of the window passed as an argument, makes a
    pixmap out of it and returns that pixmap.

    We identify the argument window using the \l
    {QWidget::winId()}{QWidget.winId()} method which returns the
    window system identifier. Here it returns the identifier of the
    current QDesktopWidget retrieved by the \l
    {QApplication::desktop()}{QApplication.desktop()} method. The
    QDesktopWidget class provides access to screen information, and
    inherits \l {QWidget::winId()}{QWidget::winId()}.

    We update the screenshot preview label using the private \c
    updateScreenshotLabel() method. Then we enable the \gui {New
    Screenshot} button, and finally we make the \c Screenshot widget
    visible if it was hidden during the screenshot.

    \snippet Screenshot.java 8

    The \gui {Hide This Window} option is enabled or disabled
    depending on the delay of the screenshot. If there is no delay,
    the application window cannot be hidden and the option's checkbox
    is disabled.

    The \c updateCheckBox() method is called whenever the user changes
    the delay using the \gui {Screenshot Delay} option.

    \snippet Screenshot.java 9

    The private \c createOptionsGroupBox() method is called from the
    constructor.

    First we create a group box that will contain all of the options'
    widgets. Then we create a QSpinBox and a QLabel for the \gui
    {Screenshot Delay} option, and connect the spinbox to the \c
    updateCheckBox() method. Finally, we create a QCheckBox for the \gui
    {Hide This Window} option, add all the options' widgets to a
    QGridLayout and install the layout on the group box.

    Note that we don't have to specify any parents for the widgets
    when we create them. The reason is that when we add a widget to a
    layout and install the layout on another widget, the layout's
    widgets are automatically reparented to the widget the layout is
    installed on.

    \snippet Screenshot.java 10

    The private \c createButtonsLayout() method is called from the
    constructor. We create the application's buttons using the private
    \c createButton() method, and add them to a QHBoxLayout.

    \snippet Screenshot.java 11

    The private \c createButton() method is called from the \c
    createButtonsLayout() method. It simply creates a QPushButton
    with the provided text, connects it to the provided receiver and
    method, and returns a pointer to the button.

    \snippet Screenshot.java 12

    The private \c updateScreenshotLabel() method is called whenever
    the screenshot changes, or when a resize event changes the size of
    the screenshot preview label. It updates the screenshot preview's
    label using the \l {QLabel::setPixmap()}{QLabel.setPixmap()} and
    \l {QPixmap::scaled()}{QPixmap.scaled()} methods.

    \l {QPixmap::scaled()}{QPixmap.scaled()} returns a copy of the
    given pixmap scaled to a rectangle of the given size according to
    the given \l {Qt::AspectRatioMode}{AspectRatioMode} and \l
    {Qt::TransformationMode}{TransformationMode}. We scale the
    original pixmap to fit the current screenshot label's size,
    preserving the aspect ratio and giving the resulting pixmap
    smoothed edges.

    \snippet Screenshot.java 1
    \snippet Screenshot.java 13

    Finally, we provide a \c main() method to create and show the
    shaped clock when the example is run.
*/
