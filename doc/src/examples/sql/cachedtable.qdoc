/*!
    \page qtjambi-cachedtable.html
    \title Cached Table Example

    \bold {Code}:
    \list
        \o \l{Code for Cached Table Example}{CachedTable.java}
    \endlist

    The Cached Table example shows how a table view can be used to access a database,
    caching any changes to the data until the user explicitly submits them using a
    push button.

    \image cachedtable-example.png

    The example consists of a single class, \c TableEditor, which is a
    custom dialog widget that allows the user to modify data stored in
    a database. We will first review the class definiton and how to
    use the class, then we will take a look at the implementation.

    \section1 CachedTable Class Implementation

    The \c CachedTable class inherits QDialog making the table editor
    widget a top-level dialog window.

    \snippet CachedTable.java 0

    Note the QSqlTableModel variable declaration: As we will see in
    this example, the QSqlTableModel class can be used to provide data
    to view classes such as QTableView. The QSqlTableModel class
    provides an editable data model making it possible to read and
    write database records from a single table. It is build on top of
    the lower-level QSqlQuery class which provides means of executing
    and manipulating SQL statements.

    We define a static method to check for suitable database support:

    \snippet CachedTable.java 9

    We are also going to show how a table view can be used to cache
    any changes to the data until the user explicitly requests to
    submit them. For that reason we need to declare a \c submit() slot
    in additon to the model and the editor's buttons.

    \table 100%
    \header \o Connecting to a Database
    \row
    \o

    Before we can use the \c CachedTable class, we must create a
    connection to the database containing the table we want to edit.
    We do this by defining a \c SqlCommon class containing a method
    that performs this task:

    \snippet SqlCommon.java 0

    The \c createConnection() method is a helper method provided
    for convenience. It opens a connection to an in-memory SQLITE
    database and creates a test table. If you want
    to use another database, simply modify this method's code.
    \endtable

    Apart from the static \c checkSqlLite() method, the class
    implementation consists of only the constructor and the
    \c submit() slot. In the constructor we create and customize the
    data model and the various window elements:

    \snippet CachedTable.java 1

    First we create the data model and set the SQL database table we
    want the model to operate on. Note that the
    QSqlTableModel::setTable() method does not select data from the
    table; it only fetches its field information. For that reason we
    call the QSqlTableModel::select() method later on, populating
    the model with data from the table. The selection can be
    customized by specifying filters and sort conditions (see the
    QSqlTableModel class documentation for more details).

    \snippet CachedTable.java 2

    We also set the model's edit strategy: The edit strategy dictates
    when the changes done by the user in the view are actually applied
    to the database. Since we want to cache the changes in the table
    view (i.e. in the model) until the user explicitly submits them,
    we choose the QSqlTableModel::OnManualSubmit strategy. The
    alternatives are QSqlTableModel::OnFieldChange and
    QSqlTableModel::OnRowChange.

    Finally, we set up the labels displayed in the view header using
    the \l {QSqlQueryModel::setHeaderData()}{setHeaderData()} method
    the model inherits from the QSqlQueryModel class.

    \snippet CachedTable.java 3

    Then we create a table view. The QTableView class provides a
    default model/view implementation of a table view, i.e. it
    implements a table view that displays items from a model. It also
    allows the user to edit the items, storing the changes in the
    model. To create a read only view, set the proper flag using the
    \l {QAbstractItemView::editTriggers}{editTriggers} property the
    view inherits from the QAbstractItemView class.

    We pass our model to the view, using the \l
    {QAbstractItemView::setModel()}{setModel()} method, to make the
    view present our data.

    \snippet CachedTable.java 4

    The \c {TableEditor}'s buttons are regular QPushButton objects. We
    connect the \gui Quit button to the table editor's \l
    {QWidget::close()}{close()} slot, and the \gui Submit button to
    our private \c submit() slot. The latter slot will take care of
    the data transactions. Finally, we connect the \gui Revert button
    to our model's \l {QSqlTableModel::revertAll()}{revertAll()} slot,
    reverting all pending changes (restoring the original data).

    \snippet CachedTable.java 5

    In the end we add all the buttons and the table view to a layout,
    install the layout on the table editor widget, and set the
    editor's window title.

    \snippet CachedTable.java 6
    \snippet CachedTable.java 7
    \snippet CachedTable.java 8

    The \c submit() slot is called whenever the users hit the \gui
    Submit button to save their changes.

    First, we begin a transaction on the database using the
    QSqlDatabase::transaction() method. A database transaction is a
    unit of interaction with a database management system or similar
    system that is treated in a coherent and reliable way independent
    of other transactions. A pointer to the used database can be
    obtained using the QSqlTableModel::database() method.

    Then, we try to submit all the pending changes, i.e. the model's
    modified items. If no error occurs, we commit the transaction to
    the database using the QSqlDatabase::commit() method (note that
    on some databases, this method will not work if there is an
    active QSqlQuery on the database). Otherwise we perform a rollback
    of the transaction using the QSqlDatabase::rollback() method and
    post a warning to the user.

    \table 100%
    \row
    \o
    \bold {See also:}

    A complete list of Qt's SQL \l {Database Classes}, and the \l
    {Model/View Programming} documentation.

    \endtable
*/
