/****************************************************************************
**
** Copyright (C) 2004-$THISYEAR$ $TROLLTECH$. All rights reserved.
**
** This file is part of the $MODULE$ of the Qt Toolkit.
**
** $TROLLTECH_DUAL_LICENSE$
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
    \page qtjambi-i18n.html
    \title Internationalization with Qt
    \brief Information about Qt jambi's support for internationalization and multiple languages.

    \keyword internationalization
    \keyword i18n

    The internationalization of an application is the process of making
    the application usable by people in countries other than one's own.

    \tableofcontents

    In some cases internationalization is simple, for example, making a US
    application accessible to Australian or British users may require
    little more than a few spelling corrections. But to make a US
    application usable by Japanese users, or a Korean application usable
    by German users, will require that the software operate not only in
    different languages, but use different input techniques, character
    encodings and presentation conventions.

    Qt Jambi tries to make internationalization as painless as
    possible for developers. All input widgets and text drawing
    methods in Qt Jambi offer built-in support for all supported
    languages.  The built-in font engine is capable of correctly and
    attractively rendering text that contains characters from a
    variety of different writing systems at the same time.

    Qt supports most languages in use today, in particular:
    \list
    \o All East Asian languages (Chinese, Japanese and Korean)
    \o All Western languages (using Latin script)
    \o Arabic
    \o Cyrillic languages (Russian, Ukrainian, etc.)
    \o Greek
    \o Hebrew
    \o Thai and Lao
    \o All scripts in Unicode 4.0 that do not require special processing
    \endlist

    On Windows, Unix/X11 with FontConfig (client side font support)
    and Qt for Embedded Linux the following languages are also supported:
    \list
    \o Bengali
    \o Devanagari
    \o Dhivehi (Thaana)
    \o Gujarati
    \o Gurmukhi
    \o Kannada
    \o Khmer
    \o Malayalam
    \o Myanmar
    \o Syriac
    \o Tamil
    \o Telugu
    \o Tibetan
    \endlist

    Many of these writing systems exhibit special features:

    \list

    \o \bold{Special line breaking behavior.} Some of the Asian languages are
    written without spaces between words. Line breaking can occur either
    after every character (with exceptions) as in Chinese, Japanese and
    Korean, or after logical word boundaries as in Thai.

    \o \bold{Bidirectional writing.} Arabic and Hebrew are written from right to
    left, except for numbers and embedded English text which is written
    left to right. The exact behavior is defined in the
    \l{http://www.unicode.org/unicode/reports/tr9/}{Unicode Technical Annex #9}.

    \o \bold{Non-spacing or diacritical marks (accents or umlauts in European
    languages).} Some languages such as Vietnamese make extensive use of
    these marks and some characters can have more than one mark at the
    same time to clarify pronunciation.

    \o \bold{Ligatures.} In special contexts, some pairs of characters get
    replaced by a combined glyph forming a ligature. Common examples are
    the fl and fi ligatures used in typesetting US and European books.

    \endlist

    Qt Jambi tries to take care of all the special features listed
    above. You usually don't have to worry about these features so
    long as you use Qt Jambi's input widgets (e.g. QLineEdit,
    QTextEdit, and derived classes) and Qt Jambi's display widgets
    (e.g. QLabel).

    Support for these writing systems is transparent to the programmer
    and completely encapsulated in \l{rich text processing}{Qt Jambi's
    text engine}. This means that you don't need to have any knowledge
    about the writing system used in a particular language, except for
    the following small points:

    \list

    \o QPainter::drawText(int x, int y, const QString &str) will always
    draw the string with its left edge at the position specified with
    the x, y parameters. This will usually give you left aligned strings.
    Arabic and Hebrew application strings are usually right
    aligned, so for these languages use the version of drawText() that
    takes a QRect since this will align in accordance with the language.

    \o When you write your own text input controls, use \l
    QFontMetrics::charWidth() to determine the width of a character in a
    string. In some languages (e.g. Arabic or languages from the Indian
    subcontinent), the width and shape of a glyph changes depending on the
    surrounding characters. Writing input controls usually requires a
    certain knowledge of the scripts it is going to be used in. Usually
    the easiest way is to subclass QLineEdit or QTextEdit.

    \endlist

    The following sections give some information on the status of the
    internationalization (i18n) support in Qt Jambi. See also the
    \l{Qt Linguist manual}.

    \section1 Step by Step

    Writing cross-platform international software with Qt Jambi is a
    gentle, incremental process. Your software can become
    internationalized in the following stages:

    \section2 Use tr() for All Literal Text

    Wherever your program uses "quoted text" for text that will
    be presented to the user, ensure that it is processed by the \l
    QCoreApplication::translate() function. Essentially all that is necessary
    to achieve this is to use QtJambiObject::tr(). For example:

    \snippet doc/src/snippets/code/doc_src_i18n.java 0

    This accounts for 99% of the user-visible strings you're likely to
    write.

    If the quoted text is not in a member function of a QtJambiObject
    subclass, use either the QCoreApplication::translate() function
    directly:

    \snippet doc/src/snippets/code/doc_src_i18n.java 1

    \section2 Use QKeySequence() for Accelerator Values

    Accelerator values such as Ctrl+Q or Alt+F need to be translated
    too. If you hardcode Qt::CTRL + Qt::Key_Q for "quit" in your
    application, translators won't be able to override it. The
    correct idiom is

    \snippet doc/src/snippets/code/doc_src_i18n.java 20

    \section2 Produce Translations

    Once you are using tr() throughout an application, you can start
    producing translations of the user-visible text in your program.

    The \l{Qt Linguist manual} provides further information about
    Qt Jambi's translation tools, \e{Qt Linguist}, \c lupdate and \c
    lrelease.

    Translation of a Qt Jambi application is a three-step process:

    \list 1

    \o Run \c lupdate to extract translatable text from the Java
    source code of the Qt Jambi application, resulting in a message
    file for translators (a \c .ts file). The utility recognizes the
    tr() construct described above and produces \c .ts files (usually
    one per language).

    \o Provide translations for the source texts in the \c .ts file, using
    \e{Qt Linguist}. Since \c .ts files are in XML format, you can also
    edit them by hand.

    \o Run \c lrelease to obtain a light-weight message file (a \c .qm
    file) from the \c .ts file, suitable only for end use. Think of the \c
    .ts files as "source files", and \c .qm files as "object files". The
    translator edits the \c .ts files, but the users of your application
    only need the \c .qm files. Both kinds of files are platform and
    locale independent.

    \endlist

    Typically, you will repeat these steps for every release of your
    application. The \c lupdate utility does its best to reuse the
    translations from previous releases.

    In your application, you must \l QTranslator::load() the translation
    files appropriate for the user's language, and install them using \l
    QCoreApplication::installTranslator().

    \c linguist, \c lupdate and \c lrelease are installed in the \c
    bin subdirectory of the base directory Qt Jambi is installed into.
    Click Help|Manual in \e{Qt Linguist} to access the user's manual;
    it contains a tutorial to get you started.

    \target qt-itself
    Qt itself contains over 400 strings that will also need to be
    translated into the languages that you are targeting. You will find
    translation files for French, German and Simplified Chinese in
    \c{$QTDIR/translations}, as well as a template for translating to
    other languages. (This directory also contains some additional
    unsupported translations which may be useful.)

    Typically, your application's \c main() function will look like
    this:

    \snippet doc/src/snippets/code/doc_src_i18n.java 8

    \keyword localization

    \section2 Localize

    Localization is the process of adapting to local conventions, for
    example presenting dates and times using the locally preferred
    formats. Such localizations can be accomplished using appropriate tr()
    strings.

    \snippet doc/src/snippets/code/doc_src_i18n.java 11

    In the example, for the US we would leave the translation of
    "AMPM" as it is and thereby use the 12-hour clock branch; but in
    Europe we would translate it as something else and this will make
    the code use the 24-hour clock branch.

    For localized numbers use the QLocale class.

    Localizing images is not recommended. Choose clear icons that are
    appropriate for all localities, rather than relying on local puns or
    stretched metaphors. The exception is for images of left and right
    pointing arrows which may need to be reversed for Arabic and Hebrew
    locales.

    \section1 Dynamic Translation

    Some applications, such as Qt Linguist, must be able to support changes
    to the user's language settings while they are still running. To make
    widgets aware of changes to the installed QTranslators, reimplement the 
    widget's \l{QWidget::changeEvent()}{changeEvent()} function to check whether 
    the event is a \l{QEvent::LanguageChange}{LanguageChange} event, and update
    the text displayed by widgets using the \l{QObject::tr()}{tr()} function
    in the usual way. For example:

    \snippet doc/src/snippets/code/doc_src_i18n.java 12

    All other change events should be passed on by calling the default
    implementation of the function.

    The list of installed translators might change in reaction to a 
    \l{QEvent::LocaleChange}{LocaleChange} event, or the application might
    provide a user interface that allows the user to change the current
    application language.

    The default event handler for QWidget subclasses responds to the
    QEvent::LanguageChange event, and will call this function when necessary;
    other application components can also force widgets to update themselves
    by posting the \l{QEvent::LanguageChange}{LanguageChange} event to them.

    \omit (None of this should be relevant for Java - except
           perhaps locals on X11)
    \section1 System Support

    Some of the operating systems and windowing systems that Qt Jambi
    runs on only have limited support for Unicode. The level of
    support available in the underlying system has some influence on
    the support that Qt can provide on those platforms, although in
    general Qt applications need not be too concerned with
    platform-specific limitations.

    \section2 Unix/X11

    \list
    \o  Locale-oriented fonts and input methods. Qt hides these and
        provides Unicode input and output.
    \o  Filesystem conventions such as
        \l{http://www.ietf.org/rfc/rfc2279.txt}{UTF-8}
        are under development in some Unix variants. All Qt file
        functions allow Unicode, but convert filenames to the local
        8-bit encoding, as this is the Unix convention (see
        QFile::setEncodingFunction() to explore alternative
        encodings).
    \o  File I/O defaults to the local 8-bit encoding,
        with Unicode options in QTextStream.
    \endlist

    \section2 Windows

    \list
    \o  Qt provides full Unicode support, including input methods, fonts,
        clipboard, drag-and-drop and file names.
    \o  File I/O defaults to Latin1, with Unicode options in QTextStream.
        Note that some Windows programs do not understand big-endian
        Unicode text files even though that is the order prescribed by
        the Unicode Standard in the absence of higher-level protocols.
    \o  Unlike programs written with MFC or plain winlib, Qt programs
        are portable between Windows 98 and Windows NT.
        \e {You do not need different binaries to support Unicode.}
    \endlist

    \section1 Note about Locales on X11

    Many Unix distributions contain only partial support for some locales.
    For example, if you have a \c /usr/share/locale/ja_JP.EUC directory,
    this does not necessarily mean you can display Japanese text; you also
    need JIS encoded fonts (or Unicode fonts), and the \c
    /usr/share/locale/ja_JP.EUC directory needs to be complete. For best
    results, use complete locales from your system vendor.

    \section1 Relevant Qt Classes

    These classes are relevant to internationalizing Qt applications.
    \endomit
*/
