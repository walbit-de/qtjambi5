diff --git a/src/corelib/global/qnamespace.h b/src/corelib/global/qnamespace.h
index dec2c44637..6531740c61 100644
--- a/src/corelib/global/qnamespace.h
+++ b/src/corelib/global/qnamespace.h
@@ -1857,6 +1857,11 @@ public:
 
     enum Callback {
         EventNotifyCallback,
+        /**Required by QtJambi 5**/
+        ConnectCallback,
+        DisconnectCallback,
+        AdoptCurrentThread,
+        /*************************/
         LastCallback
     };
     static bool registerCallback(Callback, qInternalCallback);
diff --git a/src/corelib/kernel/qobject.cpp b/src/corelib/kernel/qobject.cpp
index 644f1916c9..4516f84ae0 100644
--- a/src/corelib/kernel/qobject.cpp
+++ b/src/corelib/kernel/qobject.cpp
@@ -2697,6 +2697,98 @@ QMetaObject::Connection QObject::connect(const QObject *sender, const char *sign
                  (method && *method) ? method+1 : "(null)");
         return QMetaObject::Connection(0);
     }
+	
+	/** recovered from Qt4 for QtJambi5 **/{
+        const void *cbdata[] = { sender, signal, receiver, method, &type};
+        if(QInternal::activateCallbacks(QInternal::ConnectCallback, (void **) cbdata)){
+            QByteArray tmp_signal_name;
+
+            const QMetaObject *smeta = sender->metaObject();
+            ++signal; //skip code
+            QArgumentTypeArray signalTypes;
+            QByteArray signalName = QMetaObjectPrivate::decodeMethodSignature(signal, signalTypes);
+            int signal_index = QMetaObjectPrivate::indexOfSignalRelative(
+                    &smeta, signalName, signalTypes.size(), signalTypes.constData());
+            if (signal_index < 0) {
+                // check for normalized signatures
+                tmp_signal_name = QMetaObject::normalizedSignature(signal - 1);
+                signal = tmp_signal_name.constData() + 1;
+
+                signalTypes.clear();
+                signalName = QMetaObjectPrivate::decodeMethodSignature(signal, signalTypes);
+                signal_index = QMetaObjectPrivate::indexOfSignalRelative(
+                        &smeta, signalName, signalTypes.size(), signalTypes.constData());
+            }
+            if (signal_index >= 0) {
+                signal_index = QMetaObjectPrivate::originalClone(smeta, signal_index);
+                signal_index += QMetaObjectPrivate::signalOffset(smeta);
+            }
+
+            QByteArray tmp_method_name;
+            ++method; // skip code
+
+            QArgumentTypeArray methodTypes;
+            QByteArray methodName = QMetaObjectPrivate::decodeMethodSignature(method, methodTypes);
+            const QMetaObject *rmeta = receiver->metaObject();
+            int method_index_relative = -1;
+
+            int membcode = extract_code(method);
+
+            switch (membcode) {
+            case QSLOT_CODE:
+                method_index_relative = QMetaObjectPrivate::indexOfSlotRelative(
+                        &rmeta, methodName, methodTypes.size(), methodTypes.constData());
+                break;
+            case QSIGNAL_CODE:
+                method_index_relative = QMetaObjectPrivate::indexOfSignalRelative(
+                        &rmeta, methodName, methodTypes.size(), methodTypes.constData());
+                break;
+            }
+            if (method_index_relative < 0) {
+                // check for normalized methods
+                tmp_method_name = QMetaObject::normalizedSignature(method);
+                method = tmp_method_name.constData();
+
+                methodTypes.clear();
+                methodName = QMetaObjectPrivate::decodeMethodSignature(method, methodTypes);
+                // rmeta may have been modified above
+                rmeta = receiver->metaObject();
+                switch (membcode) {
+                case QSLOT_CODE:
+                    method_index_relative = QMetaObjectPrivate::indexOfSlotRelative(
+                            &rmeta, methodName, methodTypes.size(), methodTypes.constData());
+                    break;
+                case QSIGNAL_CODE:
+                    method_index_relative = QMetaObjectPrivate::indexOfSignalRelative(
+                            &rmeta, methodName, methodTypes.size(), methodTypes.constData());
+                    break;
+                }
+            }
+
+            int *types = 0;
+            if (type == Qt::QueuedConnection) {
+                types = queuedConnectionTypes(signalTypes.constData(), signalTypes.size());
+            }
+
+            QObjectPrivate::StaticMetaCallFunction callFunction = rmeta ? rmeta->d.static_metacall : 0;
+
+            QMetaMethod signalMethod = QMetaObjectPrivate::signal(smeta, signal_index);
+            if (signalMethod.isValid())
+                const_cast<QObject*>(sender)->connectNotify(signalMethod);
+            QScopedPointer<QObjectPrivate::Connection> c(new QObjectPrivate::Connection);
+            c->sender = const_cast<QObject*>(sender);
+            c->signal_index = signal_index;
+            c->receiver = const_cast<QObject*>(receiver);
+            c->method_relative = method_index_relative;
+            c->method_offset = rmeta->methodOffset();
+            c->connectionType = type;
+            c->isSlotObject = false;
+            c->argumentTypes.store(types);
+            c->nextConnectionList = 0;
+            c->callFunction = callFunction;
+            return QMetaObject::Connection(c.take());
+        }
+    }
     QByteArray tmp_signal_name;
 
     if (!check_signal_macro(sender, signal, "connect", "bind"))
@@ -2838,6 +2930,40 @@ QMetaObject::Connection QObject::connect(const QObject *sender, const QMetaMetho
                  method.methodSignature().constData() );
         return QMetaObject::Connection(0);
     }
+	
+    /** recovered from Qt4 for QtJambi5 **/{
+        QByteArray methodSignature;
+		if(method.isValid()){
+			methodSignature.reserve(qstrlen(method.methodSignature())+1);
+			methodSignature.append((char)(method.methodType() == QMetaMethod::Slot ? QSLOT_CODE
+										: method.methodType() == QMetaMethod::Signal ? QSIGNAL_CODE : 0  + '0'));
+			methodSignature.append(method.methodSignature());
+		}
+		QByteArray signalSignature;
+        signalSignature.reserve(qstrlen(signal.methodSignature())+1);
+        signalSignature.append((char)(signal.methodType() == QMetaMethod::Slot ? QSLOT_CODE
+                                    : signal.methodType() == QMetaMethod::Signal ? QSIGNAL_CODE : 0  + '0'));
+        signalSignature.append(signal.methodSignature());
+		const void *cbdata[] = { sender, signalSignature.constData(), receiver, methodSignature.constData(), &type};
+		if(QInternal::activateCallbacks(QInternal::ConnectCallback, (void **) cbdata)){
+                    QObjectPrivate::StaticMetaCallFunction callFunction = receiver && receiver->metaObject() ? receiver->metaObject()->d.static_metacall : 0;
+                        if (signal.isValid())
+                                const_cast<QObject*>(sender)->connectNotify(signal);
+
+                        QScopedPointer<QObjectPrivate::Connection> c(new QObjectPrivate::Connection);
+                        c->sender = const_cast<QObject*>(sender);
+                        c->signal_index = signal.isValid() ? signal.methodIndex() : -1;
+                        c->receiver = const_cast<QObject*>(receiver);
+                        c->method_relative = method.isValid() ? method.methodIndex() : -1;
+                        c->method_offset = receiver ? receiver->metaObject()->methodOffset() : 0;
+                        c->connectionType = type;
+                        c->isSlotObject = false;
+                        c->argumentTypes.store(0);
+                        c->nextConnectionList = 0;
+                        c->callFunction = callFunction;
+			return QMetaObject::Connection(c.take());
+        }
+    }
 
     int signal_index;
     int method_index;
@@ -2964,6 +3090,39 @@ bool QObject::disconnect(const QObject *sender, const char *signal,
         qWarning("QObject::disconnect: Unexpected null parameter");
         return false;
     }
+	
+    /** recovered from Qt4 for QtJambi5 **/{
+        const void *cbdata[] = { sender, signal, receiver, method };
+        if (QInternal::activateCallbacks(QInternal::DisconnectCallback, (void **) cbdata)){
+
+            QByteArray tmp_signal_name;
+
+            const QMetaObject *smeta = sender->metaObject();
+            ++signal; //skip code
+            QArgumentTypeArray signalTypes;
+            QByteArray signalName = QMetaObjectPrivate::decodeMethodSignature(signal, signalTypes);
+            int signal_index = QMetaObjectPrivate::indexOfSignalRelative(
+                    &smeta, signalName, signalTypes.size(), signalTypes.constData());
+            if (signal_index < 0) {
+                // check for normalized signatures
+                tmp_signal_name = QMetaObject::normalizedSignature(signal - 1);
+                signal = tmp_signal_name.constData() + 1;
+
+                signalTypes.clear();
+                signalName = QMetaObjectPrivate::decodeMethodSignature(signal, signalTypes);
+                signal_index = QMetaObjectPrivate::indexOfSignalRelative(
+                        &smeta, signalName, signalTypes.size(), signalTypes.constData());
+            }
+            if (signal_index >= 0) {
+                signal_index = QMetaObjectPrivate::originalClone(smeta, signal_index);
+                signal_index += QMetaObjectPrivate::signalOffset(smeta);
+            }
+
+            QMetaMethod signalMethod = QMetaObjectPrivate::signal(smeta, signal_index);
+            const_cast<QObject*>(sender)->disconnectNotify(signalMethod);
+            return true;
+        }
+    }
 
     const char *signal_arg = signal;
     QByteArray signal_name;
@@ -3122,6 +3281,20 @@ bool QObject::disconnect(const QObject *sender, const QMetaMethod &signal,
         signalSignature.append((char)(QSIGNAL_CODE + '0'));
         signalSignature.append(signal.methodSignature());
     }
+    /** recovered from Qt4 for QtJambi5 **/{
+        QByteArray methodSignature;
+        if (method.isValid()) {
+            methodSignature.reserve(method.methodSignature().size()+1);
+            methodSignature.append((char)(method.methodType()==QMetaMethod::Signal ? QSIGNAL_CODE + '0' : QSLOT_CODE + '0'));
+            methodSignature.append(method.methodSignature());
+        }
+        const void *cbdata[] = { sender, signalSignature.constData(), receiver, methodSignature.constData() };
+
+        if (QInternal::activateCallbacks(QInternal::DisconnectCallback, (void **) cbdata)){
+            const_cast<QObject*>(sender)->disconnectNotify(signal);
+            return true;
+        }
+    }
 
     int signal_index;
     int method_index;
@@ -3452,6 +3625,9 @@ bool QMetaObjectPrivate::disconnect(const QObject *sender,
     // prevent incoming connections changing the connectionLists while unlocked
     ++connectionLists->inUse;
 
+	/** recovered from Qt4 for QtJambi5 **/
+	QMetaMethod smethod = QMetaObjectPrivate::signal(smeta, signal_index);
+
     bool success = false;
     if (signal_index < 0) {
         // remove from all connection lists
@@ -4925,6 +5101,37 @@ QMetaObject::Connection QObjectPrivate::connectImpl(const QObject *sender, int s
 bool QObject::disconnect(const QMetaObject::Connection &connection)
 {
     QObjectPrivate::Connection *c = static_cast<QObjectPrivate::Connection *>(connection.d_ptr);
+	
+    /** recovered from Qt4 for QtJambi5 **/
+    if(c && c->sender){
+        QMetaMethod signal;
+        QByteArray signalSignature;
+        if (c->signal_index>=0) {
+            const QMetaObject* smeta = c->sender->metaObject();
+            signal = smeta->method(c->signal_index);
+            if(signal.isValid()){
+                signalSignature.reserve(signal.methodSignature().size()+1);
+                signalSignature.append((char)(QSIGNAL_CODE + '0'));
+                signalSignature.append(signal.methodSignature());
+            }
+        }
+        QByteArray methodSignature;
+        if(c->receiver && c->method_relative>=0){
+            const QMetaObject* rmeta = c->receiver->metaObject();
+            QMetaMethod method = rmeta->method(c->method_offset + c->method_relative);
+            if (method.isValid()) {
+                methodSignature.reserve(method.methodSignature().size()+1);
+                methodSignature.append((char)(method.methodType()==QMetaMethod::Signal ? QSIGNAL_CODE + '0' : QSLOT_CODE + '0'));
+                methodSignature.append(method.methodSignature());
+            }
+        }
+        const void *cbdata[] = { c->sender, signalSignature.constData(), c->receiver, methodSignature.constData() };
+
+        if (QInternal::activateCallbacks(QInternal::DisconnectCallback, (void **) cbdata)){
+            c->sender->disconnectNotify(signal);
+            return true;
+        }
+    }
 
     if (!c || !c->receiver)
         return false;
diff --git a/src/corelib/thread/qthread_unix.cpp b/src/corelib/thread/qthread_unix.cpp
index 695d45d8e7..a2cc1ac40b 100644
--- a/src/corelib/thread/qthread_unix.cpp
+++ b/src/corelib/thread/qthread_unix.cpp
@@ -238,17 +238,32 @@ QThreadData *QThreadData::current(bool createIfNecessary)
 {
     QThreadData *data = get_thread_data();
     if (!data && createIfNecessary) {
-        data = new QThreadData;
-        QT_TRY {
+/** recovered from Qt4 for QtJambi5 **/
+        void *a;
+        if (QInternal::activateCallbacks(QInternal::AdoptCurrentThread, &a)) {
+            QThread *adopted = static_cast<QThread*>(a);
+            Q_ASSERT(adopted);
+            data = QThreadData::get2(adopted);
             set_thread_data(data);
-            data->thread = new QAdoptedThread(data);
-        } QT_CATCH(...) {
-            clear_thread_data();
+            adopted->d_func()->running = true;
+            adopted->d_func()->finished = false;
+            static_cast<QAdoptedThread *>(adopted)->init();
+        } else {
+/** end */
+            data = new QThreadData;
+            QT_TRY {
+                set_thread_data(data);
+                data->thread = new QAdoptedThread(data);
+            } QT_CATCH(...) {
+                clear_thread_data();
+                data->deref();
+                data = 0;
+                QT_RETHROW;
+            }
             data->deref();
-            data = 0;
-            QT_RETHROW;
+/** recovered from Qt4 for QtJambi5 **/
         }
-        data->deref();
+/** end */
         data->isAdopted = true;
         data->threadId.store(to_HANDLE(pthread_self()));
         if (!QCoreApplicationPrivate::theMainThread)
diff --git a/src/corelib/thread/qthread_win.cpp b/src/corelib/thread/qthread_win.cpp
index 5c7642c26e..3f6cdd2b46 100644
--- a/src/corelib/thread/qthread_win.cpp
+++ b/src/corelib/thread/qthread_win.cpp
@@ -126,19 +126,33 @@ QThreadData *QThreadData::current(bool createIfNecessary)
     qt_create_tls();
     QThreadData *threadData = reinterpret_cast<QThreadData *>(TlsGetValue(qt_current_thread_data_tls_index));
     if (!threadData && createIfNecessary) {
-        threadData = new QThreadData;
-        // This needs to be called prior to new AdoptedThread() to
-        // avoid recursion.
-        TlsSetValue(qt_current_thread_data_tls_index, threadData);
-        QT_TRY {
-            threadData->thread = new QAdoptedThread(threadData);
-        } QT_CATCH(...) {
-            TlsSetValue(qt_current_thread_data_tls_index, 0);
+/** recovered from Qt4 for QtJambi5 **/
+        QThread *adopted = 0;
+        if (QInternal::activateCallbacks(QInternal::AdoptCurrentThread, (void **) &adopted)) {
+            Q_ASSERT(adopted);
+            threadData = QThreadData::get2(adopted);
+            TlsSetValue(qt_current_thread_data_tls_index, threadData);
+            adopted->d_func()->running = true;
+            adopted->d_func()->finished = false;
+            static_cast<QAdoptedThread *>(adopted)->init();
+        } else {
+/** end */
+            threadData = new QThreadData;
+            // This needs to be called prior to new AdoptedThread() to
+            // avoid recursion.
+            TlsSetValue(qt_current_thread_data_tls_index, threadData);
+            QT_TRY {
+                threadData->thread = new QAdoptedThread(threadData);
+            } QT_CATCH(...) {
+                TlsSetValue(qt_current_thread_data_tls_index, 0);
+                threadData->deref();
+                threadData = 0;
+                QT_RETHROW;
+            }
             threadData->deref();
-            threadData = 0;
-            QT_RETHROW;
+/** recovered from Qt4 for QtJambi5 **/
         }
-        threadData->deref();
+/** end */
         threadData->isAdopted = true;
         threadData->threadId.store(reinterpret_cast<Qt::HANDLE>(quintptr(GetCurrentThreadId())));
 
