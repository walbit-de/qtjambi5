/*!
    \page qtjambi-menus.html
    \title Menus Example

    \bold {Code}:
    \list
        \o \l{Code for Menus Example}{Menus.java}
    \endlist

    The Menus example demonstrates how menus can be used in a main
    window application.

    A menu widget can be either a pull-down menu in a menu bar or a
    standalone context menu. Pull-down menus are shown by the menu bar
    when the user clicks on the respective item or presses the
    specified shortcut key. Context menus are usually invoked by some
    special keyboard key or by right-clicking.

    \image menus-example.png

    A menu consists of a list of \e action items. In applications,
    many common commands can be invoked via menus, toolbar buttons as
    well as keyboard shortcuts. Since the user expects the commands to
    be performed in the same way, regardless of the user interface
    used, it is useful to represent each command as an action.

    The Menus example consists of one single class, \c Menus,
    extending the QMainWindow class. QMainWindow provides a main
    application window, with a menu bar, tool bars, dock widgets and a
    status bar around a large central widget. When choosing one of the
    action items in our application, it will display the item's path
    in its central widget.

    \section1 Menus Class Implementation

    First, we declare the various menus and actions as well as a
    simple information label in the application wide scope:

    \snippet Menus.java 0
    \codeline
    \snippet Menus.java 2

    The QMenu class provides a menu widget for use in menu bars,
    context menus, and other popup menus while the QAction class
    provides an abstract user interface action that can be inserted
    into widgets.

    In some situations it is useful to group actions together, e.g.,
    we have a \gui {Left Align} action, a \gui {Right Align} action, a
    \gui {Justify} action, and a \gui {Center} action, and we want
    only one of these actions to be active at any one time. One simple
    way of achieving this is to group the actions together in an
    action group using the QActionGroup class.

    \snippet Menus.java 3

    In the constructor, we start off by creating a regular QWidget and
    make it our main window's central widget. Note that the main
    window takes ownership of the widget pointer and deletes it at the
    appropriate time.

    \snippet Menus.java 4

    Then we create the information label as well as a top and bottom
    filler that we add to a layout which we install on the central
    widget. QMainWindow objects come with their own customized layout
    and setting a layout on a the actual main window, or creating a
    layout with a main window as a parent, is considered an error. You
    should always set your own layout on the central widget instead.

    \snippet Menus.java 5
    \codeline
    \snippet Menus.java 6

    To simplify the constructor, we have chosen to create the actions
    and menus using two convenience methods: \c createActions() and \c
    createMenus(). We will get back to these shortly.

    QMainWindow's \l {QMainWindow::statusBar()}{statusBar()} method
    returns the status bar for the main window (if the status bar does
    not exist, this method will create and return an empty status
    bar). We initialize the status bar and window title, resize the
    window to an appropriate size as well as ensure that the main
    window cannot be resized to a smaller size than the given
    one. Finally, we set the window icon.

    Now, let's take a closer look at the \c createActions()
    convenience method that creates the various actions:

    \snippet Menus.java 8
    \dots 8

    A QAction object may contain an icon, a text, a shortcut, a status
    tip, a "What's This?" text, and a tooltip. Most of these can be
    set in the constructor, but they can also be set independently
    using the provided convenience methods.

    In the \c createActions() method, we first create a \c newAct
    action. We make \gui Ctrl+N its shortcut using the \l
    {QAction::setShortcut()}{QAction.setShortcut()} method, and we set
    its status tip using the \l
    {QAction::setStatusTip()}{QAction.setStatusTip()} method (the
    status tip is displayed on all status bars provided by the
    action's top-level parent widget). We also connect its \l
    {QAction::triggered()}{triggered()} signal to the \c newFile()
    method.

    The rest of the actions are created in a similar manner. Please
    see the source code for details.

    Note that the methods corresponding to the various actions are
    left out of this documentation since they are trivial, i.e., most
    of them are only displaying the action's path in the main window's
    central widget.

    \snippet Menus.java 9
    \snippet Menus.java 10

    Once we have created the \gui {Left Align}, \gui {Right Align},
    \gui {Justify}, and a \gui {Center} actions, we can also create
    the previously mentioned action group.

    Each action is added to the group using QActionGroup's \l
    {QActionGroup::addAction()}{addAction()} method. Note that an
    action also can be added to a group by creating it with the group
    as its parent. Since an action group is exclusive by default, only
    one of the actions in the group is checked at any one time (this
    can be altered using the \l
    {QActionGroup::setExclusive()}{QActionGroup.setExclusive()}
    method).

    When all the actions are created, we use the \c createMenus()
    method to add the actions to the menus and to insert the menus
    into the menu bar:

    \snippet Menus.java 11

    QMenuBar's \l {QMenuBar::addMenu()}{addMenu()} method appends a
    new QMenu with the given title, to the menubar (note that the
    menubar takes ownership of the menu). We use QWidget's \l
    {QWidget::addAction()}{addAction()} method to add each action to
    the corresponding menu.

    Alternatively, the QMenu class provides several \l
    {QMenu::addAction()}{addAction()} convenience methods that create
    and add new actions from given texts and/or icons. You can also
    provide a member that will automatically connect to the new
    action's \l {QAction::triggered()}{triggered()} signal, and a
    shortcut represented by a QKeySequence instance.

    The \l {QMenu::addSeparator()}{QMenu.addSeparator()} method
    creates and returns a new separator action, i.e. an action for
    which \l {QAction::isSeparator()}{QAction.isSeparator()} returns
    true, and adds the new action to the menu's list of actions.

    \snippet Menus.java 12

    Note the \gui Format menu. First of all, it is added as a submenu
    to the \gui Edit Menu using QMenu's \l
    {QMenu::addMenu()}{addMenu()} method. Secondly, take a look at the
    alignment actions: In the \c createActions() method we added the
    \c leftAlignAct, \c rightAlignAct, \c justifyAct and \c centerAct
    actions to an action group. Nevertheless, we must add each action
    to the menu separately while the action group does its magic
    behind the scene.

    \snippet Menus.java 7

    To provide a custom context menu, we must reimplement QWidget's \l
    {QWidget::contextMenuEvent()}{contextMenuEvent()} method to
    receive the widget's context menu events (note that the default
    implementation simply ignores these events).

    Whenever we receive such an event, we create a menu containing the
    \gui Cut, \gui Copy and \gui Paste actions. Context menus can be
    executed either asynchronously using the \l
    {QMenu::popup()}{popup()} method or synchronously using the \l
    {QMenu::exec()}{exec()} method. In this example, we have chosen to
    show the menu using its \l {QMenu::exec()}{exec()} method. By
    passing the event's position as argument we ensure that the
    context menu appears at the expected position.

    \snippet Menus.java 1
    \snippet Menus.java 13

    Finally, we provide a \c main() method to create and show our main
    window when the example is run.
*/
