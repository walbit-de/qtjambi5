/*!
\page qtjambi-resourcesystem.html
\title Resource System Example

\bold {Code}:
\list
    \o \l{Code for Resource System Example}{ResourceSystem.java}
\endlist

\section1 Introduction

The resource system example illustrates how you can easily bundle resources with
your Java application by using the class path file engine.
The class path file engine searches for the files or directories you specify in
all directories or \c{.jar} files in the current class path. It also allows you
to list the contents of directories in the class path, even if they are actually
distributed over several different actual locations.

You can tell Qt Jambi to use the class path file engine when specifying the file name.
Simply prefix the name with \c{classpath:}, and Qt Jambi will automatically invoke the
class path file engine. If you wish to search for a file at a specific location
in the class path, then a second request format is available:
\c{classpath:<absolute path>#<filename>}. The first variable, the absolute path, can
be the full path of a directory or \c{.jar} file, while the filename should be
the resource you want to request. Qt Jambi will then only search the specific directory
or \c{.jar} file for the file. This can be useful in cases when you want to work
with \c{.jar} files inside of Qt Jambi.

\section1 The Example

The Resource System (\c{org.qtjambi.examples.ResourceSystem}) example shows off
the different features of the class path file engine.

The example has two modes:

\list
\o In the default mode it will list the contents of the entire class path.
\o In the second mode it will limit itself to the contents of a single \c{.jar} file.
\endlist

In either mode, it will show these contents in a QTreeWidget and let the user
select images to show them in the window.

In the default mode, the application should list the contents of the entire
class path. We do this by specifying the root directory and prefixing it with
\c{classpath:} with the following assignment:

\code
searchPath = "classpath:/";
\endcode

Every entry of the class path has a root directory, so this directory is
distributed over all parts of the class path; i.e. if the classpath contains
two entries: \c{/my_java_files/:/java_sdk/rt.jar}, the root directory will
contain all contents of \c{/my_java_files} as well as all contents in the root
of \c{rt.jar}. We simply use QDir on the root directory and entryList() to get
its contents.

In the alternative mode, we only want to search a single .jar file specified by
the user. This is accomplished by asking the user to select a file, and then
requesting the root from th specific \c{.jar} file selected:

\code
String fileName = QFileDialog.getOpenFileName(this, "Select a .jar file",
        null, new QFileDialog.Filter("Jar Files (*.jar)"));

if (fileName.length() == 0) {
    browseClassPath = true;
    browseClassPathButton.setChecked(true);
}

QFileInfo jarInfo = new QFileInfo(fileName);
searchPath = "classpath:" + jarInfo.canonicalFilePath() + "#/";
\endcode

After the search path has been selected, the application recursively fills the
tree widget with any directory or image file it finds. From this point on it
works as you would expect it to if it was a normal image viewer application
that searched the main file system. When the user selects a file from the tree
widget, the application will attempt to load it as a pixmap and set it on its
label at the bottom of the window:

\code
QFileInfo info = selected_item.getInfo();
if (info.exists() && !info.isDir()) {
    QPixmap pm = new QPixmap(info.absoluteFilePath());
    m_currentImage.setPixmap(pm);
}
\endcode

*/
