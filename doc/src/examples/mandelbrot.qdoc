/*!
    \page qtjambi-mandelbrot.html
    \title Mandelbrot Example

    \bold {Code}:
    \list
        \o \l{Code for Mandelbrot Example}{Mandelbrot.java}
    \endlist

    The Mandelbrot example shows how to use a worker thread to
    perform heavy computations without blocking the main thread's
    event loop.

    The heavy computation here is the Mandelbrot set, probably the
    world's most famous fractal. These days, while sophisticated
    programs such as \l{http://xaos.sourceforge.net/}{XaoS} that provide
    real-time zooming in the Mandelbrot set, the standard Mandelbrot
    algorithm is just slow enough for our purposes.

    \image mandelbrot.png Screenshot of the Mandelbrot example

    In real life, the approach described here is applicable to a
    large set of problems, including synchronous network I/O and
    database access, where the user interface must remain responsive
    while some heavy operation is taking place.

    The Mandelbrot application supports zooming and scrolling using
    the mouse or the keyboard. To avoid freezing the main thread's
    event loop (and, as a consequence, the application's user
    interface), we put all the fractal computation in a separate
    worker thread. The thread emits a signal when it is done
    rendering the fractal.

    During the time where the worker thread is recomputing the
    fractal to reflect the new zoom factor position, the main thread
    simply scales the previously rendered pixmap to provide immediate
    feedback. The result doesn't look as good as what the worker
    thread eventually ends up providing, but at least it makes the
    application more responsive. The sequence of screenshots below
    shows the original image, the scaled image, and the rerendered
    image.

    \table
    \row
    \o \inlineimage mandelbrot_zoom1.png
    \o \inlineimage mandelbrot_zoom2.png
    \o \inlineimage mandelbrot_zoom3.png
    \endtable

    Similarly, when the user scrolls, the previous pixmap is scrolled
    immediately, revealing unpainted areas beyond the edge of the
    pixmap, while the image is rendered by the worker thread.

    \table
    \row
    \o \inlineimage mandelbrot_scroll1.png
    \o \inlineimage mandelbrot_scroll2.png
    \o \inlineimage mandelbrot_scroll3.png
    \endtable

    The application consists of two classes:

    \list
    \o \c RenderThread is a \c Thread subclass that renders
       the Mandelbrot set.
    \o \c Mandelbrot is a QWidget subclass that shows the
       Mandelbrot set on screen and lets the user zoom and scroll.
    \endlist

    \section1 RenderThread Class Implementation

    We'll start with the implementation of the \c RenderThread class:

    \snippet Mandelbrot.java 17
    \snippet Mandelbrot.java 18

    The class inherits \c Thread so that it gains the ability to run in
    a separate thread.

    In the constructor, we initialize the \c restart and \c abort
    variables to \c false. These variables control the flow of the \c
    run() method. We also initialize the \c colormap array, which
    contains a series of RGB colors.

    \snippet Mandelbrot.java 19

    The \c render() method is called by the \c Mandelbrot
    whenever it needs to generate a new image of the Mandelbrot set.
    The \c centerX, \c centerY, and \c scaleFactor parameters specify
    the portion of the fractal to render; \c resultSize specifies the
    size of the resulting QImage.

    The method stores the parameters in member variables. If the
    thread isn't already running, it starts it; otherwise, it sets \c
    restart to \c true (telling \c run() to stop any unfinished
    computation and start again with the new parameters) and wakes up
    the thread, which might be sleeping.

    \snippet Mandelbrot.java 20
    \snippet Mandelbrot.java 21
    \snippet Mandelbrot.java 22

    \c run() is quite a big method, so we'll break it down into
    parts.

    The method body is an infinite loop which starts by storing the
    rendering parameters in local variables. As usual, we protect
    accesses to the member variables using the synchronized
    keyword. Storing the member variables in local variables allows us
    to minimize the amount of code that needs to be protected. This
    ensures that the main thread will never have to block for too long
    when it needs to access \c{RenderThread}'s member variables (e.g.,
    in \c render()).

    \snippet Mandelbrot.java 23
    \snippet Mandelbrot.java 24
    \snippet Mandelbrot.java 25

    Then comes the core of the algorithm. Instead of trying to create
    a perfect Mandelbrot set image, we do multiple passes and
    generate more and more precise (and computationally expensive)
    approximations of the fractal.

    If we discover inside the loop that \c restart has been set to \c
    true (by \c render()), we break out of the loop immediately, so
    that the control quickly returns to the very top of the outer loop
    and we fetch the new rendering parameters. Similarly, if we
    discover that \c abort has been set to \c true (by the \c
    Mandelbrot.closeEvent() method), we return from the method
    immediately, terminating the thread.

    The core algorithm is beyond the scope of this tutorial.

    \snippet Mandelbrot.java 26
    \snippet Mandelbrot.java 27

    Once we're done with all the iterations, we call \c wait() to put
    the thread to sleep by calling, unless \c restart is \c
    true. There's no use in keeping a worker thread looping
    indefinitely while there's nothing to do.

    \snippet Mandelbrot.java 28

    The \c rgbFromWaveLength() method is a helper method that
    converts a wave length to a RGB value compatible with 32-bit
    \l{QImage}s. It is called from the constructor to initialize the
    \c colormap array with pleasing colors.

    \section1 Mandelbrot Class Implementation

    The \c Mandelbrot class uses \c RenderThread to draw the
    Mandelbrot set on screen.

    \snippet Mandelbrot.java 0

    The implementation starts with a few constants that we'll need
    later on. We also declare a signal: Whenever a thread is done
    rendering an image, it emits the \c renderedImage() signal.

    \snippet Mandelbrot.java 2

    The interesting part of the constructor is \l
    {QObject::connect()}{QObject.connect()} call. Although it looks
    like a standard signal-slot connection between two \l{QObject}s,
    because the signal is emitted in a different thread than the
    receiver lives in, the connection is effectively a
    \l{Qt::QueuedConnection}{queued connection}. These connections are
    asynchronous (i.e., non-blocking), meaning that the slot will be
    called at some point after the \c emit statement. What's more, the
    slot will be invoked in the thread in which the receiver lives.
    Here, the signal is emitted in the worker thread, and the slot is
    executed in the GUI thread when control returns to the event loop.

    \snippet Mandelbrot.java 3

    In \l{QWidget::paintEvent()}{paintEvent()}, we start by filling
    the background with black. If we have nothing yet to paint (\c
    pixmap is null), we print a message on the widget asking the user
    to be patient, returning from the method immediately.

    \snippet Mandelbrot.java 4
    \snippet Mandelbrot.java 5

    If the pixmap has the right scale factor, we draw the pixmap
    directly onto the widget. Otherwise, we scale and translate the
    \l{The Coordinate System}{coordinate system} before we draw the
    pixmap. By reverse mapping the widget's rectangle using the scaled
    painter matrix, we also make sure that only the exposed areas of
    the pixmap are drawn. The calls to \l
    {QPainter::save()}{QPainter.save()} and \l
    {QPainter::restore()}{QPainter.restore()} make sure that any
    painting performed afterwards uses the standard coordinate system.

    \snippet Mandelbrot.java 6

    At the end of the paint event handler, we draw a text string and
    a semi-transparent rectangle on top of the fractal.

    \snippet Mandelbrot.java 7

    Whenever the user resizes the widget, we call \c render() to start
    generating a new image, with the same \c centerX, \c centerY, and
    \c currentScale parameters but with the new widget size.

    Notice that we rely on \c resizeEvent() being automatically
    called by Qt when the widget is shown the first time to generate
    the image the very first time.

    \snippet Mandelbrot.java 8

    The \c closeEvent() method is reimplemented to receive the
    widget's close events because we want to ensure that the \c run()
    method stops running as soon as possible. This is done by setting
    \c abort to \c true, before passing the event to the base class
    event handler.

    \snippet Mandelbrot.java 9

    The key press event handler provides a few keyboard bindings for
    the benefit of users who don't have a mouse. The \c zoom() and \c
    scroll() methods will be covered later.

    \snippet Mandelbrot.java 10

    The wheel event handler is reimplemented to make the mouse wheel
    control the zoom level. \l
    {QWheelEvent::delta()}{QWheelEvent.delta()} returns the angle of
    the wheel mouse movement, in eights of a degree. For most mice,
    one wheel step corresponds to 15 degrees. We find out how many
    mouse steps we have and determine the zoom factor in consequence.
    For example, if we have two wheel steps in the positive direction
    (i.e., +30 degrees), the zoom factor becomes \c ZoomInFactor to
    the second power, i.e. 0.8 * 0.8 = 0.64.

    \snippet Mandelbrot.java 11

    When the user presses the left mouse button, we store the mouse
    pointer position in \c lastDragPos.

    \snippet Mandelbrot.java 12

    When the user moves the mouse pointer while the left mouse button
    is pressed, we adjust \c pixmapOffset to paint the pixmap at a
    shifted position and call \l {QWidget::update()}{QWidget.update()}
    to force a repaint.

    \snippet Mandelbrot.java 13

    When the left mouse button is released, we update \c pixmapOffset
    just like we did on a mouse move and we reset \c lastDragPosition
    to a default value. Then, we call \c scroll() to render a new
    image for the new position. (Adjusting \c pixmapOffset isn't
    sufficient because areas revealed when dragging the pixmap are
    drawn in black.)

    \snippet Mandelbrot.java 14

    The \c updatePixmap() slot is invoked when the worker thread has
    finished rendering an image. We start by checking whether a drag
    is in effect and do nothing in that case. In the normal case, we
    store the image in \c pixmap and reinitialize some of the other
    members. At the end, we call \l
    {QWidget::update()}{QWidget.update()} to refresh the display.

    At this point, you might wonder why we use a QImage for the
    parameter and a QPixmap for the data member. Why not stick to one
    type? The reason is that QImage is the only class that supports
    direct pixel manipulation, which we need in the worker thread. On
    the other hand, before an image can be drawn on screen, it must
    be converted into a pixmap. It's better to do the conversion once
    and for all here, rather than in \c paintEvent().

    \snippet Mandelbrot.java 15

    In \c zoom(), we recompute \c currentScale. Then we call \l
    {QWidget::update()}{QWidget.update()} to draw a scaled pixmap, and
    we ask the worker thread to render a new image corresponding to
    the new \c currentScale value.

    \snippet Mandelbrot.java 16

    \c scroll() is similar to \c zoom(), except that the affected
    parameters are \c centerX and \c centerY.

    \section1 The main() Method

    The application's multithreaded nature has no impact on its \c
    main() method, which is as simple as usual:

    \snippet Mandelbrot.java 1
    \snippet Mandelbrot.java 29
*/
