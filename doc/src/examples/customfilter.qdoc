/*!
    \page qtjambi-customfilter.html
    \title Custom Sort/Filter Model Example

    \bold {Code}:
    \list
        \o \l{Code for Custom Sort/Filter Model Example}{CustomFilter.java}
    \endlist

    The Custom Sort/Filter Model example illustrates how to subclass
    QSortFilterProxyModel to perform advanced sorting and filtering.

    \image customfilter-example.png

    The QSortFilterProxyModel class provides support for sorting and
    filtering data passed between another model and a
    view.

    The model transforms the structure of a source model by mapping
    the model indexes it supplies to new indexes, corresponding to
    different locations, for views to use. This approach allows a
    given source model to be restructured as far as views are
    concerned, without requiring any transformations on the underlying
    data and without duplicating the data in memory.

    The Custom Sort/Filter Model example consists of two classes:

    \list

        \o The \c MySortFilterProxyModel class provides a custom proxy
        model.

        \o The \c CustomFilter class provides the main application
        window, using the custom proxy model to sort and filter a
        standard item model.

    \endlist

    We will first take a look at the \c MySortFilterProxyModel class
    to see how the custom proxy model is implemented, then we will
    take a look at the \c CustomFilter class to see how the model is
    used.

    \section1 MySortFilterProxyModel Class Implementation

    The \c MySortFilterProxyModel class extends the
    QSortFilterProxyModel class:

    \snippet CustomFilter.java 13

    Since QAbstractProxyModel and its subclasses are derived from
    QAbstractItemModel, much of the same advice about subclassing
    normal models also applies to proxy models.

    On the other hand, it is worth noting that many of
    QSortFilterProxyModel's default implementations of methods are
    written so that they call the equivalent methods in the relevant
    source model. This simple proxying mechanism may need to be
    overridden for source models with more complex behavior; in this
    example we derive from the QSortFilterProxyModel class to ensure
    that our filter can recognize a valid range of dates, and to
    control the sorting behavior.

    \snippet CustomFilter.java 14
    \snippet CustomFilter.java 15

    We want to be able to filter our data by specifying a given period
    of time. For that reason, we implement custom \c
    setFilterMinimumDate() and \c setFilterMaximumDate() methods to
    set the corresponding variables. The \l
    {QSortFilterProxyModel::filterChanged()}{QSortFilterProxyModel.filterChanged()}
    method updates the proxy model's mapping by reapplying the
    filter. Note that QSortFilterProxyModel also provides the \l
    {QSortFilterProxyModel::clear()}{clear()} method that removes
    all mapping, forcing the model to update the sorting as well as
    the data filtering.

    In addition, we reimplement QSortFilterProxyModel's \l
    {QSortFilterProxyModel::filterAcceptsRow()}{filterAcceptsRow()}
    method to only accept rows with valid dates:

    \snippet CustomFilter.java 16
    \snippet CustomFilter.java 19

    The \l
    {QSortFilterProxyModel::filterAcceptsRow()}{filterAcceptsRow()}
    method is expected to return true if the given row should be
    included in the model. In our example, a row is accepted if either
    the subject or the sender contains the given regular expression,
    and the date is valid.

    \snippet CustomFilter.java 17

    Finally, we want to be able to sort the senders by their email
    adresses. For that reason we must reimplement the \l
    {QSortFilterProxyModel::lessThan()}{QSortFilterProxyModel.lessThan()}
    method. This method is used as the < operator when
    sorting. The default implementation handles a collection of types
    including QDateTime and String, but in order to be able to sort
    the senders by their email adresses we must first identify the
    adress within the given string:

    \snippet CustomFilter.java 18
    \snippet CustomFilter.java 20

    We use QRegExp to define a pattern for the adresses we are looking
    for. The \l {QRegExp::indexIn()}{QRegExp.indexIn()} method
    attempts to find a match in the given string and returns the
    position of the first match, or -1 if there was no match. If the
    given string contains the pattern, we use QRegExp's \l
    {QRegExp::cap()}{cap()} method to retrieve the actual
    adress. The \l {QRegExp::cap()}{cap()} method returns the text
    captured by the \e nth subexpression. The entire match has index 0
    and the parenthesized subexpressions have indexes starting from 1
    (excluding non-capturing parentheses).

    The reimplementation of the \l
    {QSortFilterProxyModel::lessThan()}{lessThan()} method completes
    our custom proxy model. Let's see how we can use it in an
    application.

    \section1 CustomFilter Class Implementation

    The \c CustomFilter class extends QWidget, and provides the main
    application window:

    \snippet CustomFilter.java 0
    \dots
    \snippet CustomFilter.java 2

    In the constructor, we first create our source model by calling
    the \c createMailModel() method. The QStandardItemModel class
    provides a generic model for storing custom data, and can be used
    as a repository for standard Qt data types.

    \snippet CustomFilter.java 3

    Then we create a proxy model. By calling the \l
    {QSortFilterProxyModel::setSourceModel()}{QSortFilterProxyModel.setSourceModel()}
    method, we make the proxy model process the data in our mail
    model. We also set the \l
    {QSortFilterProxyModel::dynamicSortFilter}{dynamicSortFilter}
    property that holds whether the proxy model is dynamically sorted
    and filtered. By setting this property to true, we ensure that the
    model is sorted and filtered whenever the contents of the source
    model change.

    The main application window shows views of both the source model
    and the proxy model. The source view is quite simple:

    \snippet CustomFilter.java 4

    The QTreeView class provides a default model/view implementation
    of a tree view; our view implements a tree representation of items
    in the application's source model. We add our view widget to a
    layout that we install on a corresponding group box.

    The proxy model view, on the other hand, contains several widgets
    controlling the various aspects of transforming the source model's
    data structure:

    \snippet CustomFilter.java 5

    Note that whenever the user changes one of the filtering options,
    we must explicitly reapply the filter. This is done by connecting
    the various editors to methods that update the proxy model.

    \snippet CustomFilter.java 6

    The sorting will be handled by the view. All we have to do is to
    enable sorting for our proxy view by setting the \l
    {QTreeView::sortingEnabled}{QTreeView.sortingEnabled} property
    (which is false by default). Then we add all the filtering widgets
    and the proxy view to a layout that we install on a corresponding
    group box.

    \snippet CustomFilter.java 7
    \snippet CustomFilter.java 8

    After putting our two group boxes into another layout that we
    install on our main application widget, we customize the
    application window. Finally, we call the \c textFilterChanged()
    and \c dateFilterChanged() methods to update the proxy model
    according to the filtering widgets's initial values.

    \snippet CustomFilter.java 11

    The \c textFilterChanged() method is called whenever the user
    changes the filter pattern or the case sensitivity.

    We first retrieve the preferred syntax (the \l
    {QRegExp::PatternSyntax}{QRegExp.PatternSyntax} enum is used to
    interpret the meaning of the given pattern), then we determine the
    preferred case sensitivity. Based on these preferences and the
    current filter pattern, we set the proxy model's \l
    {QSortFilterProxyModel::filterRegExp}{filterRegExp} property. The
    \l {QSortFilterProxyModel::filterRegExp}{filterRegExp} property
    holds the regular expression used to filter the contents of the
    source model; calling QSortFilterProxyModel's \l
    {QSortFilterProxyModel::setFilterRegExp()}{setFilterRegExp()}
    method also updates the model.

    \snippet CustomFilter.java 12

    The \c dateFilterChanged() method is called whenever the user
    modifies the range of valid dates. We retrieve the new dates from
    the user interface, and call the corresponding methods (provided
    by our custom proxy model) to set the proxy model's minimum and
    maximum dates. As we explained above, calling these methods also
    updates the model.

    \snippet CustomFilter.java 10
    \codeline
    \snippet CustomFilter.java 9

    The \c createMailModel() method is a convenience method
    provided to simplify the constructor. All it does is to create and
    return a standard item model describing a collection of
    emails. Each description is added to the model using \c addMail(),
    another convenience method.

    \snippet CustomFilter.java 1
    \snippet CustomFilter.java 21

    Finally, we provide the \c main() method to create and show the
    main application window when the example is run.

*/
