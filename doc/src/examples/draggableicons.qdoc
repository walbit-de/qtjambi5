/****************************************************************************
**
** Copyright (C) 2005-$THISYEAR$ $TROLLTECH$. All rights reserved.
**
** This file is part of the $MODULE$ of the Qt Toolkit.
**
** $TROLLTECH_DUAL_LICENSE$
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
    \page qtjambi-draggableicons.html
    \title Draggable Icons Example

    \bold {Code}:
    \list
        \o \l{Code for Draggable Icons Example}{DraggableIcons.java}
    \endlist

    The Draggable Icons example shows how to drag and drop image data between widgets
    in the same application, and between different applications.

    \image draggableicons-example.png

    In many situations where drag and drop is used, the user starts dragging from
    a particular widget and drops the payload onto another widget. In this example,
    we subclass QLabel to create labels that we use as drag sources, and place them
    inside \l{QWidget}s that serve as both containers and drop sites.

    In addition, when a drag and drop operation occurs, we want to send more than
    just an image. We also want to send information about where the user clicked in
    the image so that the user can place it precisely on the drop target. This level
    of detail means that we must create a custom MIME type for our data.

    \section1 DragWidget Class

    The icon widgets that we use to display icons are subclassed from QLabel; they
    are set up in the constructor:

    \snippet DraggableIcons.java 0

    To enable dragging from the icon, we need to act on a mouse press event.
    We do this by reimplementing \l QWidget::mousePressEvent() and setting up
    a QDrag object.

    \snippet DraggableIcons.java 1

    Since we will be sending pixmap data for the icon and information about the
    user's click in the icon widget, we construct a QByteArray and package up the
    details using a QDataStream.

    For interoperability, drag and drop operations describe the data they contain
    using MIME types. In Qt Jambi, we describe this data using a QMimeData object:

    \snippet DraggableIcons.java 2

    We choose an unofficial MIME type for this purpose, and supply the QByteArray
    to the MIME data object.

    The drag and drop operation itself is handled by a QDrag object:

    \snippet DraggableIcons.java 3

    Here, we pass the data to the drag object, set a pixmap that will be shown
    alongside the cursor during the operation, and define the position of a hot
    spot that places the position of this pixmap under the cursor.

*/
