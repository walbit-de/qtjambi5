/*!
    \page qtjambi-shapedclock.html
    \title Shaped Clock Example

    \bold {Code}:
    \list
        \o \l{Code for Shaped Clock Example}{ShapedClock.java}
    \endlist

    The Shaped Clock example shows how to apply a widget mask to a
    top-level widget to produce a shaped window.

    \image shapedclock-example.png

    Widget masks are used to customize the shapes of top-level widgets
    by restricting the available area for painting. On some window
    systems, setting certain window flags will cause the window
    decoration (title bar, window frame, buttons) to be disabled,
    allowing specially-shaped windows to be created. In this example,
    we use this feature to create a circular window containing an
    analog clock.

    \section1 ShapedClock Class Implementation

    The \c ShapedClock class is based on the \c AnalogClock class
    defined in the \l{Analog Clock Example}{Analog Clock} example.
    The \c ShapedClock constructor performs many of the same tasks as
    the \c AnalogClock constructor. We set up a timer and connect it
    to the widget's \l {QWidget::update()}{update()} method:

    \snippet ShapedClock.java 0
    \snippet ShapedClock.java 2

    We inform the window manager that the widget is not to be
    decorated with a window frame by setting the \l
    {Qt::FramelessWindowHint}{Qt.WindowType.FramelessWindowHint} flag
    on the widget. As a result, we need to provide a way for the user
    to move the clock around the screen.

    Mouse button events are delivered to the \c mousePressEvent() handler:

    \snippet ShapedClock.java 3

    If the left mouse button is pressed over the widget, we record the
    displacement in global (screen) coordinates between the top-left
    position of the widget's frame (even when hidden) and the point
    where the mouse click occurred. This displacement will be used if
    the user moves the mouse while holding down the left button. Since
    we acted on the event, we accept it by calling its
    \l{QEvent::accept()}{accept()} method.

    \image shapedclock-dragging.png

    The \c mouseMoveEvent() handler is called if the mouse is moved
    over the widget.

    \snippet ShapedClock.java 4

    If the left button is held down while the mouse is moved, the
    top-left corner of the widget is moved to the point given by
    subtracting the \c dragPosition from the current cursor position
    in global coordinates. If we drag the widget, we also accept the
    event.

    The \c paintEvent() method is given for completeness. See the
    \l{Analog Clock Example}{Analog Clock} example for a description
    of the process used to render the clock.

    \snippet ShapedClock.java 5


    In the \c resizeEvent() handler, we re-use some of the code from
    the \c paintEvent() to determine the region of the widget that is
    visible to the user:

    \snippet ShapedClock.java 6

    Since the clock face is a circle drawn in the center of the
    widget, this is the region we use as the mask.

    Although the lack of a window frame may make it difficult for the
    user to resize the widget on some platforms, it will not
    necessarily be impossible. The \c resizeEvent() method ensures
    that the widget mask will always be updated if the widget's
    dimensions change, and additionally ensures that it will be set up
    correctly when the widget is first displayed.

    To ensure that the widget is given a reasonable default size when
    it is first shown, we also implement the \c sizeHint() method:

    \snippet ShapedClock.java 7

    Finally, we provide a \c main() method to create and show the
    shaped clock when the example is run:

    \snippet ShapedClock.java 1
    \snippet ShapedClock.java 8

    \section1 Notes on Widget Masks

    Since QRegion allows arbitrarily complex regions to be created,
    widget masks can be made to suit the most unconventionally-shaped
    windows, and even allow widgets to be displayed with holes in
    them.

    Widget masks can also be constructed by using the contents of
    pixmap to define the opaque part of the widget. For a pixmap with
    an alpha channel, a suitable mask can be obtained with
    \l {QPixmap::mask()}{QPixmap.mask()}.
*/
